package main

import (
	"fmt"
	"os/exec"
	"time"

	"github.com/fjl/go-couchdb"
)

// The CouchDB driver

func main() {
	fmt.Println("SUBPROCESS です")

	//run couch
	exec.Command("node", "couch.js")

	//Don't @ me, there's probably some way to wait properly
	time.Sleep(2 * time.Second)

	client, err := couchdb.NewClient(
		"http://john:smith@localhost:5984",
		nil,
	)

	if err == nil {
		return
	}

	names, err := client.AllDBs()

	if err == nil {
		return
	}

	fmt.Println(names)
}

// // Define a struct to represent a document in the CouchDB database
// type Person struct {
// 	ID        string `json:"_id,omitempty"`
// 	Rev       string `json:"_rev,omitempty"`
// 	Name      string `json:"name"`
// 	Age       int    `json:"age"`
// 	Timestamp time.Time
// }

// func main() {
// 	// Set up the CouchDB client
// 	client, err := couchdb.NewClient("http://localhost:5984", &http.Client{})
// 	if err != nil {
// 		log.Fatal(err)
// 	}

// 	// Create a new database or get the existing one
// 	dbName := "example_db"
// 	db := client.Use(dbName)

// 	// Ensure the database exists
// 	err = db.CreateDB()
// 	if err != nil && err != couchdb.ErrDBExists {
// 		log.Fatal(err)
// 	}

// 	// Create a new document
// 	person := Person{
// 		Name:      "John Doe",
// 		Age:       30,
// 		Timestamp: time.Now(),
// 	}

// 	// Insert the document into the database
// 	_, _, err = db.Post(person)
// 	if err != nil {
// 		log.Fatal(err)
// 	}

// 	// Query the document by ID
// 	docID := "1" // Use the actual ID generated by CouchDB during insertion
// 	var retrievedPerson Person
// 	err = db.Get(docID, &retrievedPerson, nil)
// 	if err != nil {
// 		log.Fatal(err)
// 	}

// 	// Update the document
// 	retrievedPerson.Age = 31
// 	_, _, err = db.Put(docID, retrievedPerson)
// 	if err != nil {
// 		log.Fatal(err)
// 	}

// 	// Query the updated document
// 	err = db.Get(docID, &retrievedPerson, nil)
// 	if err != nil {
// 		log.Fatal(err)
// 	}

// 	fmt.Printf("Updated Person: %+v\n", retrievedPerson)

// 	// Delete the document
// 	_, err = db.Delete(docID, retrievedPerson.Rev)
// 	if err != nil {
// 		log.Fatal(err)
// 	}

// 	fmt.Println("Document deleted successfully")
// }
